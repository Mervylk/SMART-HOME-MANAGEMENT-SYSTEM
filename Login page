<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login to Smart Home</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom font for a clean look */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Basic styling for the message box */
        .message-box {
            padding: 1rem;
            border-radius: 0.5rem;
            margin-top: 1rem;
            font-weight: 500;
            text-align: center;
        }
        .message-box.success {
            background-color: #d1fae5; /* green-100 */
            color: #065f46; /* green-800 */
        }
        .message-box.error {
            background-color: #fee2e2; /* red-100 */
            color: #991b1b; /* red-800 */
        }
        .message-box.loading {
            background-color: #e0f2fe; /* blue-100 */
            color: #0369a1; /* blue-800 */
        }
    </style>
</head>
<body class="bg-gradient-to-r from-purple-400 via-pink-500 to-red-500 min-h-screen flex items-center justify-center p-4">

    <div class="bg-white p-8 rounded-xl shadow-2xl w-full max-w-md transform transition-all duration-300 hover:scale-105">
        <h2 class="text-4xl font-extrabold text-center text-gray-800 mb-8">Login</h2>
        <p class="text-center text-gray-600 mb-6">Access your Smart Home Dashboard</p>

        <form id="loginForm" class="space-y-6">
            <div>
                <label for="email" class="block text-sm font-medium text-gray-700 mb-2">Email Address</label>
                <input
                    type="email"
                    id="email"
                    name="email"
                    placeholder="you@example.com"
                    required
                    class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-purple-500 focus:border-purple-500 sm:text-sm transition duration-150 ease-in-out"
                >
            </div>

            <div>
                <label for="password" class="block text-sm font-medium text-gray-700 mb-2">Password</label>
                <input
                    type="password"
                    id="password"
                    name="password"
                    placeholder="••••••••"
                    required
                    class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-purple-500 focus:border-purple-500 sm:text-sm transition duration-150 ease-in-out"
                >
            </div>

            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <input id="remember_me" name="remember_me" type="checkbox" class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded">
                    <label for="remember_me" class="ml-2 block text-sm text-gray-900">Remember me</label>
                </div>
                <a href="#" class="text-sm font-medium text-purple-600 hover:text-purple-500">Forgot your password?</a>
            </div>

            <div>
                <button
                    type="submit"
                    id="loginButton"
                    class="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-lg font-semibold text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 transition duration-150 ease-in-out transform hover:-translate-y-0.5"
                >
                    Sign in
                </button>
            </div>
        </form>

        <div id="messageBox" class="message-box hidden"></div>

        <p class="mt-8 text-center text-sm text-gray-600">
            Don't have an account?
            <a href="#" class="font-medium text-purple-600 hover:text-purple-500">Sign up</a>
        </p>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const loginForm = document.getElementById('loginForm');
            const emailInput = document.getElementById('email');
            const passwordInput = document.getElementById('password');
            const loginButton = document.getElementById('loginButton');
            const messageBox = document.getElementById('messageBox');

            // Function to display messages to the user
            function showMessage(message, type) {
                messageBox.textContent = message;
                messageBox.className = `message-box ${type}`; // Apply type-specific styling
                messageBox.classList.remove('hidden');
            }

            // Function to hide messages
            function hideMessage() {
                messageBox.classList.add('hidden');
                messageBox.textContent = '';
                messageBox.className = 'message-box hidden';
            }

            loginForm.addEventListener('submit', async (event) => {
                event.preventDefault(); // Prevent default form submission

                hideMessage(); // Clear previous messages

                const email = emailInput.value.trim();
                const password = passwordInput.value.trim();

                // Basic client-side validation
                if (!email || !password) {
                    showMessage('Please enter both email and password.', 'error');
                    return;
                }

                // Disable button and show loading state
                loginButton.disabled = true;
                loginButton.textContent = 'Signing in...';
                loginButton.classList.add('opacity-70', 'cursor-not-allowed');
                showMessage('Attempting to log in...', 'loading');

                // --- Simulate Backend API Call ---
                // In a real application, you would make a fetch request to your backend login endpoint here.
                // Example: const response = await fetch('/api/login', { method: 'POST', body: JSON.stringify({ email, password }), headers: { 'Content-Type': 'application/json' } });

                try {
                    // Simulate network delay
                    await new Promise(resolve => setTimeout(resolve, 1500));

                    // Simulate a successful login for specific credentials
                    if (email === 'user@example.com' && password === 'password123') {
                        showMessage('Login successful! Redirecting...', 'success');
                        // In a real app: Store token, redirect to dashboard
                        setTimeout(() => {
                            // window.location.href = '/dashboard.html'; // Example redirection
                            console.log("Simulated redirection to dashboard.");
                        }, 1000);
                    } else {
                        showMessage('Invalid email or password. Please try again.', 'error');
                    }
                } catch (error) {
                    console.error('Login error:', error);
                    showMessage('An error occurred during login. Please try again later.', 'error');
                } finally {
                    // Re-enable button
                    loginButton.disabled = false;
                    loginButton.textContent = 'Sign in';
                    loginButton.classList.remove('opacity-70', 'cursor-not-allowed');
                }
            });
        });
    </script>
</body>
</html>
